/* almanna-0.1.h generated by valac 0.16.1, the Vala compiler, do not modify */


#ifndef ___HOME_NMELNICK_DOCUMENTS_PROJECTS_VALA_ALMANNA_BUILD_SRC_ALMANNA_0_1_H__
#define ___HOME_NMELNICK_DOCUMENTS_PROJECTS_VALA_ALMANNA_BUILD_SRC_ALMANNA_0_1_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <libgda/libgda.h>
#include <gee.h>

G_BEGIN_DECLS


#define ALMANNA_TYPE_COLUMN (almanna_column_get_type ())
#define ALMANNA_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_COLUMN, AlmannaColumn))
#define ALMANNA_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_COLUMN, AlmannaColumnClass))
#define ALMANNA_IS_COLUMN(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_COLUMN))
#define ALMANNA_IS_COLUMN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_COLUMN))
#define ALMANNA_COLUMN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_COLUMN, AlmannaColumnClass))

typedef struct _AlmannaColumn AlmannaColumn;
typedef struct _AlmannaColumnClass AlmannaColumnClass;
typedef struct _AlmannaColumnPrivate AlmannaColumnPrivate;

#define ALMANNA_TYPE_COMPARISON (almanna_comparison_get_type ())
#define ALMANNA_COMPARISON(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_COMPARISON, AlmannaComparison))
#define ALMANNA_COMPARISON_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_COMPARISON, AlmannaComparisonClass))
#define ALMANNA_IS_COMPARISON(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_COMPARISON))
#define ALMANNA_IS_COMPARISON_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_COMPARISON))
#define ALMANNA_COMPARISON_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_COMPARISON, AlmannaComparisonClass))

typedef struct _AlmannaComparison AlmannaComparison;
typedef struct _AlmannaComparisonClass AlmannaComparisonClass;
typedef struct _AlmannaComparisonPrivate AlmannaComparisonPrivate;

#define ALMANNA_TYPE_LOG_LEVEL (almanna_log_level_get_type ())

#define ALMANNA_TYPE_CONFIG (almanna_config_get_type ())
#define ALMANNA_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_CONFIG, AlmannaConfig))
#define ALMANNA_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_CONFIG, AlmannaConfigClass))
#define ALMANNA_IS_CONFIG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_CONFIG))
#define ALMANNA_IS_CONFIG_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_CONFIG))
#define ALMANNA_CONFIG_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_CONFIG, AlmannaConfigClass))

typedef struct _AlmannaConfig AlmannaConfig;
typedef struct _AlmannaConfigClass AlmannaConfigClass;
typedef struct _AlmannaConfigPrivate AlmannaConfigPrivate;

#define ALMANNA_TYPE_CONNECTION (almanna_connection_get_type ())
#define ALMANNA_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_CONNECTION, AlmannaConnection))
#define ALMANNA_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_CONNECTION, AlmannaConnectionClass))
#define ALMANNA_IS_CONNECTION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_CONNECTION))
#define ALMANNA_IS_CONNECTION_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_CONNECTION))
#define ALMANNA_CONNECTION_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_CONNECTION, AlmannaConnectionClass))

typedef struct _AlmannaConnection AlmannaConnection;
typedef struct _AlmannaConnectionClass AlmannaConnectionClass;
typedef struct _AlmannaConnectionPrivate AlmannaConnectionPrivate;

#define ALMANNA_TYPE_CONNECTION_POOL (almanna_connection_pool_get_type ())
#define ALMANNA_CONNECTION_POOL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_CONNECTION_POOL, AlmannaConnectionPool))
#define ALMANNA_CONNECTION_POOL_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_CONNECTION_POOL, AlmannaConnectionPoolClass))
#define ALMANNA_IS_CONNECTION_POOL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_CONNECTION_POOL))
#define ALMANNA_IS_CONNECTION_POOL_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_CONNECTION_POOL))
#define ALMANNA_CONNECTION_POOL_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_CONNECTION_POOL, AlmannaConnectionPoolClass))

typedef struct _AlmannaConnectionPool AlmannaConnectionPool;
typedef struct _AlmannaConnectionPoolClass AlmannaConnectionPoolClass;
typedef struct _AlmannaConnectionPoolPrivate AlmannaConnectionPoolPrivate;

#define ALMANNA_TYPE_DATA_BINDER (almanna_data_binder_get_type ())
#define ALMANNA_DATA_BINDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_DATA_BINDER, AlmannaDataBinder))
#define ALMANNA_DATA_BINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_DATA_BINDER, AlmannaDataBinderClass))
#define ALMANNA_IS_DATA_BINDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_DATA_BINDER))
#define ALMANNA_IS_DATA_BINDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_DATA_BINDER))
#define ALMANNA_DATA_BINDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_DATA_BINDER, AlmannaDataBinderClass))

typedef struct _AlmannaDataBinder AlmannaDataBinder;
typedef struct _AlmannaDataBinderClass AlmannaDataBinderClass;
typedef struct _AlmannaDataBinderPrivate AlmannaDataBinderPrivate;

#define ALMANNA_TYPE_ENTITY (almanna_entity_get_type ())
#define ALMANNA_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_ENTITY, AlmannaEntity))
#define ALMANNA_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_ENTITY, AlmannaEntityClass))
#define ALMANNA_IS_ENTITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_ENTITY))
#define ALMANNA_IS_ENTITY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_ENTITY))
#define ALMANNA_ENTITY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_ENTITY, AlmannaEntityClass))

typedef struct _AlmannaEntity AlmannaEntity;
typedef struct _AlmannaEntityClass AlmannaEntityClass;
typedef struct _AlmannaEntityPrivate AlmannaEntityPrivate;

#define ALMANNA_TYPE_SEARCH (almanna_search_get_type ())
#define ALMANNA_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_SEARCH, AlmannaSearch))
#define ALMANNA_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_SEARCH, AlmannaSearchClass))
#define ALMANNA_IS_SEARCH(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_SEARCH))
#define ALMANNA_IS_SEARCH_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_SEARCH))
#define ALMANNA_SEARCH_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_SEARCH, AlmannaSearchClass))

typedef struct _AlmannaSearch AlmannaSearch;
typedef struct _AlmannaSearchClass AlmannaSearchClass;

#define ALMANNA_TYPE_QUERY (almanna_query_get_type ())
#define ALMANNA_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_QUERY, AlmannaQuery))
#define ALMANNA_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_QUERY, AlmannaQueryClass))
#define ALMANNA_IS_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_QUERY))
#define ALMANNA_IS_QUERY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_QUERY))
#define ALMANNA_QUERY_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_QUERY, AlmannaQueryClass))

typedef struct _AlmannaQuery AlmannaQuery;
typedef struct _AlmannaQueryClass AlmannaQueryClass;
typedef struct _AlmannaQueryPrivate AlmannaQueryPrivate;

#define ALMANNA_TYPE_REPO (almanna_repo_get_type ())
#define ALMANNA_REPO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_REPO, AlmannaRepo))
#define ALMANNA_REPO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_REPO, AlmannaRepoClass))
#define ALMANNA_IS_REPO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_REPO))
#define ALMANNA_IS_REPO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_REPO))
#define ALMANNA_REPO_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_REPO, AlmannaRepoClass))

typedef struct _AlmannaRepo AlmannaRepo;
typedef struct _AlmannaRepoClass AlmannaRepoClass;
typedef struct _AlmannaRepoPrivate AlmannaRepoPrivate;
typedef struct _AlmannaSearchPrivate AlmannaSearchPrivate;

#define ALMANNA_TYPE_SERVER (almanna_server_get_type ())
#define ALMANNA_SERVER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), ALMANNA_TYPE_SERVER, AlmannaServer))
#define ALMANNA_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), ALMANNA_TYPE_SERVER, AlmannaServerClass))
#define ALMANNA_IS_SERVER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ALMANNA_TYPE_SERVER))
#define ALMANNA_IS_SERVER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), ALMANNA_TYPE_SERVER))
#define ALMANNA_SERVER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), ALMANNA_TYPE_SERVER, AlmannaServerClass))

typedef struct _AlmannaServer AlmannaServer;
typedef struct _AlmannaServerClass AlmannaServerClass;
typedef struct _AlmannaServerPrivate AlmannaServerPrivate;

struct _AlmannaColumn {
	GObject parent_instance;
	AlmannaColumnPrivate * priv;
};

struct _AlmannaColumnClass {
	GObjectClass parent_class;
};

typedef void (*AlmannaColumnParseMethod) (const gchar* value, GValue* result, void* user_data);
struct _AlmannaComparison {
	GTypeInstance parent_instance;
	volatile int ref_count;
	AlmannaComparisonPrivate * priv;
};

struct _AlmannaComparisonClass {
	GTypeClass parent_class;
	void (*finalize) (AlmannaComparison *self);
};

typedef enum  {
	ALMANNA_LOG_LEVEL_ERROR,
	ALMANNA_LOG_LEVEL_INFO,
	ALMANNA_LOG_LEVEL_DEBUG
} AlmannaLogLevel;

struct _AlmannaConfig {
	GObject parent_instance;
	AlmannaConfigPrivate * priv;
};

struct _AlmannaConfigClass {
	GObjectClass parent_class;
};

struct _AlmannaConnection {
	GObject parent_instance;
	AlmannaConnectionPrivate * priv;
	GdaConnection* connection;
};

struct _AlmannaConnectionClass {
	GObjectClass parent_class;
};

struct _AlmannaConnectionPool {
	GObject parent_instance;
	AlmannaConnectionPoolPrivate * priv;
};

struct _AlmannaConnectionPoolClass {
	GObjectClass parent_class;
};

struct _AlmannaDataBinder {
	GObject parent_instance;
	AlmannaDataBinderPrivate * priv;
};

struct _AlmannaDataBinderClass {
	GObjectClass parent_class;
};

typedef enum  {
	ALMANNA_ENTITY_ERROR_MISSING_COLUMN,
	ALMANNA_ENTITY_ERROR_DATABASE_ERROR,
	ALMANNA_ENTITY_ERROR_MISSING_REQUIRED
} AlmannaEntityError;
#define ALMANNA_ENTITY_ERROR almanna_entity_error_quark ()
struct _AlmannaEntity {
	GObject parent_instance;
	AlmannaEntityPrivate * priv;
	gulong _notifier;
};

struct _AlmannaEntityClass {
	GObjectClass parent_class;
	void (*register_entity) (AlmannaEntity* self);
	void (*save) (AlmannaEntity* self, GError** error);
	void (*delete) (AlmannaEntity* self, GError** error);
	gchar* (*get_entity_name) (AlmannaEntity* self);
};

struct _AlmannaQuery {
	GObject parent_instance;
	AlmannaQueryPrivate * priv;
};

struct _AlmannaQueryClass {
	GObjectClass parent_class;
};

struct _AlmannaRepo {
	GObject parent_instance;
	AlmannaRepoPrivate * priv;
};

struct _AlmannaRepoClass {
	GObjectClass parent_class;
};

typedef enum  {
	ALMANNA_SEARCH_ERROR_INVALID_KEY,
	ALMANNA_SEARCH_ERROR_INVALID_ENTITY,
	ALMANNA_SEARCH_ERROR_INVALID_COLUMN,
	ALMANNA_SEARCH_ERROR_INVALID_PAGINATION,
	ALMANNA_SEARCH_ERROR_INVALID
} AlmannaSearchError;
#define ALMANNA_SEARCH_ERROR almanna_search_error_quark ()
struct _AlmannaSearch {
	GObject parent_instance;
	AlmannaSearchPrivate * priv;
};

struct _AlmannaSearchClass {
	GObjectClass parent_class;
};

typedef enum  {
	ALMANNA_EXECUTE_ERROR_MISSING_PRIMARY_KEY,
	ALMANNA_EXECUTE_ERROR_UNKNOWN_ERROR
} AlmannaExecuteError;
#define ALMANNA_EXECUTE_ERROR almanna_execute_error_quark ()
struct _AlmannaServer {
	GObject parent_instance;
	AlmannaServerPrivate * priv;
};

struct _AlmannaServerClass {
	GObjectClass parent_class;
};


GType almanna_column_get_type (void) G_GNUC_CONST;
AlmannaColumn* almanna_column_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type, gconstpointer default_value, gint* size, gboolean is_nullable, gboolean is_sequenced, const gchar* sequence_name);
AlmannaColumn* almanna_column_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type, gconstpointer default_value, gint* size, gboolean is_nullable, gboolean is_sequenced, const gchar* sequence_name);
AlmannaColumn* almanna_column_new_with_name_type (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type);
AlmannaColumn* almanna_column_construct_with_name_type (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type);
AlmannaColumn* almanna_column_new_with_default_value (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type, gconstpointer default_value);
AlmannaColumn* almanna_column_construct_with_default_value (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, const gchar* name, const gchar* column_type, gconstpointer default_value);
AlmannaColumn* almanna_column_new_empty (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func);
AlmannaColumn* almanna_column_construct_empty (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func);
gchar* almanna_column_property_name (AlmannaColumn* self);
void almanna_column_parse (AlmannaColumn* self, const gchar* value, GValue* result);
const gchar* almanna_column_get_name (AlmannaColumn* self);
void almanna_column_set_name (AlmannaColumn* self, const gchar* value);
const gchar* almanna_column_get_column_type (AlmannaColumn* self);
void almanna_column_set_column_type (AlmannaColumn* self, const gchar* value);
gconstpointer almanna_column_get_default_value (AlmannaColumn* self);
void almanna_column_set_default_value (AlmannaColumn* self, gconstpointer value);
gint almanna_column_get_size (AlmannaColumn* self);
void almanna_column_set_size (AlmannaColumn* self, gint value);
gboolean almanna_column_get_is_nullable (AlmannaColumn* self);
void almanna_column_set_is_nullable (AlmannaColumn* self, gboolean value);
gboolean almanna_column_get_is_sequenced (AlmannaColumn* self);
void almanna_column_set_is_sequenced (AlmannaColumn* self, gboolean value);
const gchar* almanna_column_get_sequence_name (AlmannaColumn* self);
void almanna_column_set_sequence_name (AlmannaColumn* self, const gchar* value);
AlmannaColumnParseMethod almanna_column_get_parser (AlmannaColumn* self, gpointer* result_target);
void almanna_column_set_parser (AlmannaColumn* self, AlmannaColumnParseMethod value, gpointer value_target);
gpointer almanna_comparison_ref (gpointer instance);
void almanna_comparison_unref (gpointer instance);
GParamSpec* almanna_param_spec_comparison (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void almanna_value_set_comparison (GValue* value, gpointer v_object);
void almanna_value_take_comparison (GValue* value, gpointer v_object);
gpointer almanna_value_get_comparison (const GValue* value);
GType almanna_comparison_get_type (void) G_GNUC_CONST;
AlmannaComparison* almanna_comparison_new (GdaSqlOperatorType operator, const gchar* left, GValue* right);
AlmannaComparison* almanna_comparison_construct (GType object_type, GdaSqlOperatorType operator, const gchar* left, GValue* right);
GdaSqlOperatorType almanna_comparison_get_operator (AlmannaComparison* self);
void almanna_comparison_set_operator (AlmannaComparison* self, GdaSqlOperatorType value);
const gchar* almanna_comparison_get_left (AlmannaComparison* self);
void almanna_comparison_set_left (AlmannaComparison* self, const gchar* value);
GValue* almanna_comparison_get_right (AlmannaComparison* self);
void almanna_comparison_set_right (AlmannaComparison* self, GValue* value);
GType almanna_log_level_get_type (void) G_GNUC_CONST;
GType almanna_config_get_type (void) G_GNUC_CONST;
AlmannaConfig* almanna_config_new (void);
AlmannaConfig* almanna_config_construct (GType object_type);
AlmannaConfig* almanna_config_new_from_file (const gchar* filename, GError** error);
AlmannaConfig* almanna_config_construct_from_file (GType object_type, const gchar* filename, GError** error);
gint almanna_config_get_connections (AlmannaConfig* self);
void almanna_config_set_connections (AlmannaConfig* self, gint value);
const gchar* almanna_config_get_connection_string (AlmannaConfig* self);
void almanna_config_set_connection_string (AlmannaConfig* self, const gchar* value);
const gchar* almanna_config_get_username (AlmannaConfig* self);
void almanna_config_set_username (AlmannaConfig* self, const gchar* value);
const gchar* almanna_config_get_password (AlmannaConfig* self);
void almanna_config_set_password (AlmannaConfig* self, const gchar* value);
AlmannaLogLevel almanna_config_get_log_level (AlmannaConfig* self);
void almanna_config_set_log_level (AlmannaConfig* self, AlmannaLogLevel value);
GType almanna_connection_get_type (void) G_GNUC_CONST;
AlmannaConnection* almanna_connection_new (const gchar* connection_string, const gchar* auth_string, GError** error);
AlmannaConnection* almanna_connection_construct (GType object_type, const gchar* connection_string, const gchar* auth_string, GError** error);
gboolean almanna_connection_take (AlmannaConnection* self);
void almanna_connection_release (AlmannaConnection* self);
GType almanna_connection_pool_get_type (void) G_GNUC_CONST;
AlmannaConnectionPool* almanna_connection_pool_new (gint pool_size, const gchar* connection_string, const gchar* auth_string, GError** error);
AlmannaConnectionPool* almanna_connection_pool_construct (GType object_type, gint pool_size, const gchar* connection_string, const gchar* auth_string, GError** error);
AlmannaConnection* almanna_connection_pool_get_connection (AlmannaConnectionPool* self);
GType almanna_data_binder_get_type (void) G_GNUC_CONST;
void almanna_data_binder_bind (GObject* source_object, GObject* destination_object);
AlmannaDataBinder* almanna_data_binder_new (void);
AlmannaDataBinder* almanna_data_binder_construct (GType object_type);
GQuark almanna_entity_error_quark (void);
GType almanna_entity_get_type (void) G_GNUC_CONST;
AlmannaEntity* almanna_entity_new (void);
AlmannaEntity* almanna_entity_construct (GType object_type);
void almanna_entity_seal (AlmannaEntity* self);
void almanna_entity_unseal (AlmannaEntity* self);
void almanna_entity_reload (AlmannaEntity* self);
void almanna_entity_bind_data_from (AlmannaEntity* self, GObject* o);
GType almanna_search_get_type (void) G_GNUC_CONST;
AlmannaSearch* almanna_entity_search (AlmannaEntity* self);
void almanna_entity_register_entity (AlmannaEntity* self);
void almanna_entity_save (AlmannaEntity* self, GError** error);
void almanna_entity_delete (AlmannaEntity* self, GError** error);
void almanna_entity_add_column (AlmannaEntity* self, AlmannaColumn* column);
void almanna_entity_add_columns (AlmannaEntity* self, GeeArrayList* columns);
void almanna_entity_set_primary_key (AlmannaEntity* self, const gchar* column, GError** error);
void almanna_entity_set_primary_keys (AlmannaEntity* self, gchar** columns, int columns_length1, GError** error);
void almanna_entity_add_unique_constraint (AlmannaEntity* self, const gchar* name, gchar** columns, int columns_length1, GError** error);
void almanna_entity_add_has_one (AlmannaEntity* self, const gchar* name, AlmannaEntity* one_of, const gchar* this_column, const gchar* foreign_column);
void almanna_entity_add_has_many (AlmannaEntity* self, const gchar* name, AlmannaEntity* many_of, const gchar* this_column, const gchar* foreign_column);
void almanna_entity_add_many_to_many (AlmannaEntity* self, const gchar* name, AlmannaEntity* join_entity, AlmannaEntity* foreign_entity, const gchar* this_column, const gchar* foreign_column);
gchar* _almanna_entity_normalize_property (AlmannaEntity* self, const gchar* property);
GParamSpec* _almanna_entity_get_property (AlmannaEntity* self, const gchar* property);
gchar* _almanna_entity_type_of (AlmannaEntity* self, const gchar* property);
GType* _almanna_entity_gtype_of (AlmannaEntity* self, const gchar* property);
void _almanna_entity_set_in_storage (AlmannaEntity* self);
gchar* almanna_entity_get_entity_name (AlmannaEntity* self);
GeeHashMap* almanna_entity_get_columns (AlmannaEntity* self);
void almanna_entity_set_columns (AlmannaEntity* self, GeeHashMap* value);
GeeHashSet* almanna_entity_get_dirty_columns (AlmannaEntity* self);
void almanna_entity_set_dirty_columns (AlmannaEntity* self, GeeHashSet* value);
gchar** almanna_entity_get_primary_key_list (AlmannaEntity* self, int* result_length1);
void almanna_entity_set_primary_key_list (AlmannaEntity* self, gchar** value, int value_length1);
GeeArrayList* almanna_entity_get_primary_key_values (AlmannaEntity* self);
void almanna_entity_set_primary_key_values (AlmannaEntity* self, GeeArrayList* value);
GeeHashMap* almanna_entity_get_constraints (AlmannaEntity* self);
void almanna_entity_set_constraints (AlmannaEntity* self, GeeHashMap* value);
gboolean almanna_entity_get_is_dirty (AlmannaEntity* self);
gboolean almanna_entity_get_in_storage (AlmannaEntity* self);
GType almanna_query_get_type (void) G_GNUC_CONST;
AlmannaQuery* almanna_query_new (void);
AlmannaQuery* almanna_query_construct (GType object_type);
GType almanna_repo_get_type (void) G_GNUC_CONST;
extern AlmannaRepo* almanna_repo_instance;
AlmannaRepo* almanna_repo_get_instance (void);
void almanna_repo_add_entity (GType type);
AlmannaEntity* almanna_repo_get_entity (GType entity_type);
void _almanna_repo_add_entity (AlmannaRepo* self, GType type);
AlmannaRepo* almanna_repo_new (void);
AlmannaRepo* almanna_repo_construct (GType object_type);
GeeHashMap* almanna_repo_get_entities (AlmannaRepo* self);
void almanna_repo_set_entities (AlmannaRepo* self, GeeHashMap* value);
GQuark almanna_search_error_quark (void);
AlmannaSearch* almanna_search_new (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GError** error);
AlmannaSearch* almanna_search_construct (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GError** error);
AlmannaSearch* almanna_search_new_with_entity_type (GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GType entity_type, GError** error);
AlmannaSearch* almanna_search_construct_with_entity_type (GType object_type, GType g_type, GBoxedCopyFunc g_dup_func, GDestroyNotify g_destroy_func, GType entity_type, GError** error);
gpointer almanna_search_lookup (AlmannaSearch* self, gint* default_id, GError** error, ...);
AlmannaSearch* almanna_search_search_with_arraylist (AlmannaSearch* self, GeeArrayList* values, GError** error);
AlmannaSearch* almanna_search_rows (AlmannaSearch* self, gint rows);
AlmannaSearch* almanna_search_page (AlmannaSearch* self, gint page);
AlmannaSearch* almanna_search_eq (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_gt (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_lt (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_gte (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_lte (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_is_not_null (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_is_null (AlmannaSearch* self, const gchar* column, GError** error, ...);
AlmannaSearch* almanna_search_order_by (AlmannaSearch* self, const gchar* column, gboolean is_descending, GError** error);
gchar* almanna_search_as_query (AlmannaSearch* self);
gpointer almanna_search_single (AlmannaSearch* self, GError** error);
GeeArrayList* almanna_search_list (AlmannaSearch* self, GError** error);
gint64 almanna_search_count (AlmannaSearch* self, GError** error);
AlmannaSearch* almanna_search_new_search (AlmannaSearch* self);
GQuark almanna_execute_error_quark (void);
GType almanna_server_get_type (void) G_GNUC_CONST;
extern AlmannaServer* almanna_server_instance;
AlmannaServer* almanna_server_get_instance (void);
void almanna_server_open (AlmannaConfig* config, GError** error);
AlmannaConfig* almanna_server_server_config (void);
gboolean almanna_server_is_opened (AlmannaServer* self);
void almanna_server_save (AlmannaServer* self, AlmannaEntity* entity);
void almanna_server_delete (AlmannaServer* self, AlmannaEntity* entity);
AlmannaServer* almanna_server_new (void);
AlmannaServer* almanna_server_construct (GType object_type);
AlmannaConfig* almanna_server_get_config (AlmannaServer* self);
void almanna_server_set_config (AlmannaServer* self, AlmannaConfig* value);
AlmannaConnectionPool* almanna_server_get_pool (AlmannaServer* self);
void almanna_server_set_pool (AlmannaServer* self, AlmannaConnectionPool* value);


G_END_DECLS

#endif
