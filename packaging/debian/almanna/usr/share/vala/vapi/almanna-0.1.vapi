/* almanna-0.1.vapi generated by valac 0.16.1, do not modify. */

namespace Almanna {
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Column<G> : GLib.Object {
		public delegate GLib.Value ParseMethod<G> (string value);
		public Column (string? name = null, string? column_type = null, G default_value = null, int? size = null, bool is_nullable = false, bool is_sequenced = false, string? sequence_name = null);
		public Column.with_name_type (string name, string column_type);
		public Column.with_default_value (string name, string column_type, G default_value);
		public Column.empty ();
		public string property_name ();
		public GLib.Value parse (string value);
		public string name { get; set; }
		public string column_type { get; set; }
		public G default_value { get; set; }
		public int size { get; set; }
		public bool is_nullable { get; set; }
		public bool is_sequenced { get; set; }
		public string sequence_name { get; set; }
		public Almanna.Column.ParseMethod parser { get; set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Comparison {
		public Comparison (Gda.SqlOperatorType operator, string left, GLib.Value? right);
		public Gda.SqlOperatorType operator { get; set; }
		public string left { get; set; }
		public GLib.Value? right { get; set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Config : GLib.Object {
		public Config ();
		public Config.from_file (string filename) throws GLib.KeyFileError, GLib.FileError, GLib.Error;
		public int connections { get; set; }
		public string connection_string { get; set; }
		public string? username { get; set; }
		public string? password { get; set; }
		public Almanna.LogLevel log_level { get; set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Connection : GLib.Object {
		public Gda.Connection connection;
		public Connection (string connection_string, string? auth_string = null) throws GLib.Error;
		public bool take ();
		public void release ();
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class ConnectionPool : GLib.Object {
		public ConnectionPool (int pool_size, string connection_string, string? auth_string = null) throws GLib.Error;
		public Almanna.Connection? get_connection ();
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class DataBinder : GLib.Object {
		public static void bind (GLib.Object source_object, GLib.Object destination_object);
		public DataBinder ();
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Entity : GLib.Object {
		protected ulong _notifier;
		public Entity ();
		public void seal ();
		public void unseal ();
		public void reload ();
		public void bind_data_from (GLib.Object o);
		public Almanna.Search<Almanna.Entity> search ();
		public virtual void register_entity ();
		public virtual void save () throws Almanna.EntityError;
		public virtual void @delete () throws Almanna.EntityError;
		protected void add_column (Almanna.Column column);
		protected void add_columns (Gee.ArrayList<Almanna.Column?> columns);
		internal Almanna.Column? get_column (string column_name);
		protected void set_primary_key (string column) throws Almanna.EntityError;
		protected void set_primary_keys (string[] columns) throws Almanna.EntityError;
		protected void add_unique_constraint (string name, string[] columns) throws Almanna.EntityError;
		protected void add_has_one (string name, Almanna.Entity one_of, string? this_column, string? foreign_column);
		protected void add_has_many (string name, Almanna.Entity many_of, string? this_column, string? foreign_column);
		protected void add_many_to_many (string name, Almanna.Entity join_entity, Almanna.Entity foreign_entity, string? this_column, string? foreign_column);
		public string? _normalize_property (string property);
		public GLib.ParamSpec? _get_property (string property);
		public string? _type_of (string property);
		public GLib.Type? _gtype_of (string property);
		public void _set_in_storage ();
		public virtual string entity_name { owned get; }
		public Gee.HashMap<string,Almanna.Column?> columns { get; set; }
		public Gee.HashSet<string> dirty_columns { get; set; }
		public string[] primary_key_list { get; set; }
		public Gee.ArrayList<GLib.Value?> primary_key_values { get; set; }
		public Gee.HashMap<string,Gee.ArrayList<string>> constraints { get; set; }
		public bool is_dirty { get; }
		public bool in_storage { get; private set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	internal class ALogger : GLib.Object {
		internal static void error (string message);
		internal static void error_check (string message);
		internal static void info (string message);
		internal static void info_check (string message);
		internal static void debug (string message);
		internal static void debug_check (string message);
		public ALogger ();
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Query : GLib.Object {
		internal static void constrain_to_primary_key (Gda.SqlBuilder builder, Almanna.Entity entity_def, Almanna.Entity entity);
		internal static void report_query (Gda.Statement s);
		internal static string normalize_name (string type_name);
		public Query ();
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Repo : GLib.Object {
		public static Almanna.Repo instance;
		public static Almanna.Repo get_instance ();
		public static void add_entity (GLib.Type type);
		public static Almanna.Entity? get_entity (GLib.Type entity_type);
		protected void _add_entity (GLib.Type type);
		public Repo ();
		public Gee.HashMap<string,Almanna.Entity> entities { get; set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Search<G> : GLib.Object {
		public Search () throws Almanna.SearchError;
		public Search.with_entity_type (GLib.Type entity_type) throws Almanna.SearchError;
		public G lookup (int? default_id, ...) throws Almanna.SearchError;
		public Almanna.Search<G> search_with_arraylist (Gee.ArrayList<GLib.Value?> values) throws Almanna.SearchError;
		public Almanna.Search<G> rows (int rows);
		public Almanna.Search<G> page (int page);
		public Almanna.Search<G> eq (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> gt (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> lt (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> gte (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> lte (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> is_not_null (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> is_null (string column, ...) throws Almanna.SearchError;
		public Almanna.Search<G> order_by (string column, bool is_descending = false) throws Almanna.SearchError;
		public string as_query ();
		public G single () throws Almanna.SearchError;
		internal void single_to_entity (G entity) throws Almanna.SearchError;
		public Gee.ArrayList<G> list () throws Almanna.SearchError;
		public int64 count () throws Almanna.SearchError;
		public Almanna.Search<G> new_search ();
		internal G row_with_entity (Gda.DataModel dm, int row_number, G entity);
		internal static GLib.Value modify_entity_value (GLib.ParamSpec ps, GLib.Value v) throws Almanna.SearchError;
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public class Server : GLib.Object {
		public static Almanna.Server instance;
		public static Almanna.Server get_instance ();
		public static void open (Almanna.Config? config = null) throws GLib.Error;
		public static Almanna.Config server_config ();
		public bool is_opened ();
		public void save (Almanna.Entity entity);
		public void @delete (Almanna.Entity entity);
		public Server ();
		public Almanna.Config config { get; set; }
		public Almanna.ConnectionPool pool { get; set; }
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	internal struct OrderBy {
		public string column_name;
		public bool is_descending;
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public enum LogLevel {
		ERROR,
		INFO,
		DEBUG
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	internal errordomain ConnectionError {
		CONNECTION_FAILED
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public errordomain EntityError {
		MISSING_COLUMN,
		DATABASE_ERROR,
		MISSING_REQUIRED
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public errordomain SearchError {
		INVALID_KEY,
		INVALID_ENTITY,
		INVALID_COLUMN,
		INVALID_PAGINATION,
		INVALID
	}
	[CCode (cheader_filename = "almanna-0.1.h")]
	public errordomain ExecuteError {
		MISSING_PRIMARY_KEY,
		UNKNOWN_ERROR
	}
}
